name: Create Release Branch and PR

on:
  push:
    branches:
      - main

env:
  HUSKY: 0

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-release-branch-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: |
          npm ci
          npm install @rollup/rollup-linux-x64-gnu || true

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Create release branch and PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Current branch:"
          git branch --show-current
          
          echo "Git status before release-it:"
          git status

          # Determine the release type based on commit messages
          if git log --format=%B -n 1 ${{ github.event.before }}..${{ github.event.after }} | grep -qE '^BREAKING CHANGE:'; then
            release_type="major"
          elif git log --format=%B -n 1 ${{ github.event.before }}..${{ github.event.after }} | grep -qE '^feat:'; then
            release_type="minor"
          else
            release_type="patch"
          fi
          
          echo "Release type: ${release_type}"
          
          # Run release-it to update version and changelog
          npm run release -- ${release_type} --ci --preRelease --no-git.push --no-npm.publish --no-github.release
          
          echo "Git status after release-it:"
          git status
          
          echo "Git diff after release-it:"
          git diff
          
          # Get the new version
          new_version=$(node -p "require('./package.json').version")
          echo "New version: ${new_version}"
          
          # Check for changes
          if git diff --exit-code; then
            echo "No changes detected by git diff. Skipping PR creation."
            exit 0
          fi
          
          # Create and push the release branch
          git checkout -b release-v${new_version}
          git add .
          git commit -m "chore: prepare release v${new_version}"
          git push -u origin release-v${new_version}
          
          # Create a pull request
          pr_url=$(gh pr create --title "Release v${new_version}" --body "This PR prepares the release for version ${new_version}. Please review and merge to trigger the release process." --base main --head release-v${new_version})
          echo "Created PR: $pr_url"